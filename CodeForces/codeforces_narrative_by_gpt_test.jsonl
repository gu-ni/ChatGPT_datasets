{"question_title": "Domino for Young", "question_content": "In the quiet world of a school’s math club, a diligent student keeps a daily diary chronicling their puzzling adventures in problem-solving. Today’s entry introduces a curious classroom challenge: a peculiar arrangement of blocks, resembling stacks piled neatly from tallest to shortest, descending but never increasing as you move from left to right. Imagine these stacks as columns of books lined up along a windowsill, each tower no shorter than the one following it, and none shorter than a single book’s height.\n\nThe teacher calls this arrangement a “Young diagram,” a special kind of histogram where the number of stacks is a certain count – it might be up to several hundred thousand – and the height of each stack can be as tall as that many books as well. Due to the orderly nature of these stacks, each column’s height gently steps down or holds steady to the next, never jumping back up. This means from the tallest stack on the left to the smallest on the right, the heights flow smoothly downward or remain even, but never the other way around.\n\nThe challenge, as described in the diary, is to fill up this arrangement as much as possible with “dominos.” These dominos are small rectangles that cover exactly two spaces—either two books stacked one on top of the other, or two books standing side by side on the windowsill. The student’s goal is to place the greatest number of these dominos within the entire block structure, ensuring they never overlap, and each domino fits neatly inside the existing columns without extending outside.\n\nTo participate, the student receives two types of notes: The first line states the precise number of stacks, and on the second line, the exact height of each stack in order from left to right. Using this knowledge, the student must figure out and write down a single number—the largest count of dominos that can neatly fit without overlapping inside the block structure on the windowsill.\n\nFor example, with five stacks whose heights are three, two, two, two, and one respectively, the student finds that four dominos can be arranged inside this setup without conflict. This solution shows that careful placement, counting the possible pairs of adjacent spaces vertically or horizontally, reveals the maximum domino count possible without overstepping the bounds of the orderly stacks.\n\nThus, the diary closes the day’s entry with a clear record: given any number of columns arranged from tallest to shortest, and the heights of each pile, the student must calculate the largest number of domino-shaped pairs that fit snugly inside—like perfectly stacking dominoes on a descending windowsill, respecting both the orderly heights and the non-overlapping rule.", "starter_code": "", "platform": "codeforces", "question_id": "1268/B", "contest_id": "1268", "contest_date": "2019-12-21T11:05:00+00:00", "difficulty": "hard", "public_test_cases": "[{\"input\": \"5\\n3 2 2 2 1\", \"output\": \"4\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n1 1 1 1 1\", \"output\": \"2\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n3 3 3\", \"output\": \"4\", \"testtype\": \"stdin\"}, {\"input\": \"1\\n1\", \"output\": \"0\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n9 8 7 7 6 4 3 2 1 1\", \"output\": \"23\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n99 83 62 53 47 33 24 15 10 9\", \"output\": \"216\", \"testtype\": \"stdin\"}, {\"input\": \"100\\n100 100 99 98 97 92 92 92 92 91 89 87 87 87 86 85 84 82 82 81 81 80 79 78 78 77 77 76 76 74 72 71 71 70 69 66 64 63 63 62 60 59 59 59 55 54 53 52 52 51 49 49 49 47 47 46 46 45 44 43 42 41 41 41 40 39 38 37 37 36 31 29 25 23 22 22 21 21 20 17 17 16 15 15 14 14 13 12 12 10 9 9 8 8 8 7 4 3 3 3\", \"output\": \"2545\", \"testtype\": \"stdin\"}, {\"input\": \"100\\n494 493 483 483 482 479 469 455 452 448 446 437 436 430 426 426 423 418 417 413 409 403 402 398 388 386 384 379 373 372 366 354 353 347 344 338 325 323 323 322 310 306 303 302 299 296 291 290 288 285 281 274 258 254 253 250 248 248 247 243 236 235 233 227 227 223 208 204 200 196 192 191 185 184 183 174 167 167 165 163 158 139 138 132 123 122 111 91 89 88 83 62 60 58 45 39 38 34 26 3\", \"output\": \"13710\", \"testtype\": \"stdin\"}, {\"input\": \"100\\n1980 1932 1906 1898 1892 1883 1877 1858 1842 1833 1777 1710 1689 1678 1660 1653 1648 1647 1644 1639 1635 1635 1593 1571 1534 1470 1440 1435 1389 1272 1269 1268 1263 1255 1249 1237 1174 1174 1128 1069 1067 981 979 979 951 915 911 906 863 826 810 810 802 785 764 752 743 710 705 696 676 661 639 619 616 572 568 549 501 464 455 444 443 434 430 427 399 386 345 339 324 324 309 300 257 255 228 195 184 182 177 148 129 112 91 65 31 31 22 3\", \"output\": \"46496\", \"testtype\": \"stdin\"}, {\"input\": \"1\\n300000\", \"output\": \"150000\", \"testtype\": \"stdin\"}]", "private_test_cases": "", "metadata": "{}"}